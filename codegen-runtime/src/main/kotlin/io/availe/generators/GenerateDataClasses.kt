package io.availe.generators

import com.squareup.kotlinpoet.CodeBlock
import com.squareup.kotlinpoet.FileSpec
import io.availe.builders.buildGenericInterface
import io.availe.builders.buildValueClass
import io.availe.builders.dataClassBuilder
import io.availe.builders.packageName
import io.availe.models.Model
import io.availe.models.Property
import io.availe.models.Variant
import io.availe.utils.fieldsForBase
import io.availe.utils.fieldsForCreate
import io.availe.utils.fieldsForPatch
import java.io.File

val filePath: File = File("build/generated-src/kotlin-poet")

fun generateDataClasses(models: List<Model>) {
    val out: File = filePath
    models.forEach { m ->
        val fileBuilder = FileSpec.builder(packageName, m.name)
            .addFileComment("Generated by KReplica. Do not edit.")

        // --- DTOs ---
        val dtoSpecs = listOf(
            fieldsForBase(m) to Variant.BASE,
            fieldsForCreate(m) to Variant.CREATE,
            fieldsForPatch(m) to Variant.PATCH
        )
            .mapNotNull { (fields, variant) ->
                if (fields.isNotEmpty()) dataClassBuilder(m, fields, variant) else null
            }

        if (dtoSpecs.isNotEmpty()) {
            fileBuilder.addType(
                dtoSpecs.first().toBuilder()
                    .addKdoc(CodeBlock.of("------------- DTOs -------------"))
                    .build()
            )
            dtoSpecs.drop(1).forEach { fileBuilder.addType(it) }
        }

        // --- Interface ---
        val interfaceSpec = buildGenericInterface(m)
        fileBuilder.addType(
            interfaceSpec.toBuilder()
                .addKdoc(CodeBlock.of("------------- Interface -------------"))
                .build()
        )

        // --- Value Classes ---
        val valueClassSpecs = m.properties
            .filterIsInstance<Property.Property>()
            .map { buildValueClass(m, it) }

        if (valueClassSpecs.isNotEmpty()) {
            fileBuilder.addType(
                valueClassSpecs.first().toBuilder()
                    .addKdoc(CodeBlock.of("------------- Value classes -------------"))
                    .build()
            )
            valueClassSpecs.drop(1).forEach { fileBuilder.addType(it) }
        }

        fileBuilder.build().writeTo(out)
    }
}